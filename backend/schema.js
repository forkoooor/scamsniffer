const Sequelize = require("sequelize");
const path = require("path");
const fs = require('fs');

const mergedDatabase = path.resolve('./dataset/', "database.db");
const isFirst = !fs.existsSync(mergedDatabase);

const sequelize = new Sequelize("main", null, null, {
  dialect: "sqlite",
  storage: mergedDatabase,
  logging: false,
});


const ScamList = sequelize.define(
  "scam_list",
  {
    id: {
      type: Sequelize.INTEGER,
      allowNull: false,
      primaryKey: true,
      autoIncrement: true,
      _autoGenerated: true,
    },
    link: Sequelize.STRING,
    topDomain: Sequelize.STRING,
    type: Sequelize.STRING,
    host: Sequelize.STRING,
    tweet: Sequelize.STRING,
    twitter: Sequelize.STRING,
    nickname: Sequelize.STRING,
    content: Sequelize.STRING,
    time: Sequelize.INTEGER,
    project: Sequelize.STRING,
    projectTwitter: Sequelize.STRING,
    projectUrl: Sequelize.STRING,
  },
  {
    indexes: [
      {
        fields: ["time"],
      },
    ],
  }
);

const DomainSummary = sequelize.define(
  "domain_summary",
  {
    id: {
      type: Sequelize.INTEGER,
      allowNull: false,
      primaryKey: true,
      autoIncrement: true,
      _autoGenerated: true,
    },
    topDomain: Sequelize.STRING,
    host: Sequelize.STRING,
    count: Sequelize.INTEGER,
    needReport: {
      type: Sequelize.TINYINT,
      defaultValue: 0,
    },
    reported: {
      type: Sequelize.TINYINT,
      defaultValue: 0,
    },
  },
  {
    indexes: [
      {
        unique: true,
        fields: ["host"],
      },
      {
        fields: ["reported", "topDomain"],
      },
    ],
  }
);


const TwitterSummary = sequelize.define(
  "twitter_summary",
  {
    id: {
      type: Sequelize.INTEGER,
      allowNull: false,
      primaryKey: true,
      autoIncrement: true,
      _autoGenerated: true,
    },
    twitter: Sequelize.STRING,
    count: Sequelize.INTEGER,
    needReport: {
      type: Sequelize.TINYINT,
      defaultValue: 0,
    },
    reported: {
      type: Sequelize.TINYINT,
      defaultValue: 0,
    },
  },
  {
    indexes: [
      {
        unique: true,
        fields: ["twitter"],
      },
    ],
  }
);


const Project = sequelize.define(
  "projects",
  {
    id: {
      type: Sequelize.INTEGER,
      allowNull: false,
      primaryKey: true,
      autoIncrement: true,
      _autoGenerated: true,
    },
    symbol: Sequelize.STRING,
    slug: Sequelize.STRING,
    name: Sequelize.STRING,
    description: Sequelize.STRING,
    website: Sequelize.STRING,
    image: Sequelize.STRING,
    twitter: Sequelize.STRING,
    links: Sequelize.STRING,
    day_actions: Sequelize.INTEGER,
    week_actions: Sequelize.INTEGER,
    month_actions: Sequelize.INTEGER,
    week_follows: Sequelize.INTEGER,
    month_follows: Sequelize.INTEGER,
    day_follows: Sequelize.INTEGER,
  },
  {
    indexes: [
      {
        unique: true,
        fields: ["slug"],
      },
    ],
  }
);

const Cache = sequelize.define(
  "cache",
  {

    key: Sequelize.STRING,
    value: Sequelize.STRING
  },
  {
    indexes: [
      {
        unique: true,
        fields: ["key"],
      },
    ],
  }
);


async function init() {
    ScamList.sync({ alter: true });
    Project.sync({ alter: true });
    Cache.sync({ alter: true });
    DomainSummary.sync({ alter: true });
    TwitterSummary.sync({ alter: true });
}

if (isFirst) {
  init()
}

//  init();

module.exports = {
  init,
  sequelize,
  ScamList,
  DomainSummary,
  TwitterSummary,
  Cache,
  Project,
};
